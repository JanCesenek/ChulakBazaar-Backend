generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model items {
  id                        Int       @id @unique @default(autoincrement())
  name                      String
  image                     String
  price                     Int
  type                      String
  description               String
  seller                    String
  createdAt                 DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt                 DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  quantity                  Int?      @default(1)
  users_items_sellerTousers users     @relation("items_sellerTousers", fields: [seller], references: [username], onDelete: Cascade, onUpdate: NoAction)
}

model messages {
  id                              Int       @id @default(autoincrement())
  createdAt                       DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  sender                          String
  recipient                       String
  message                         String
  system                          Boolean?  @default(false)
  read                            Boolean?  @default(false)
  frozen                          Boolean?  @default(false)
  users_messages_recipientTousers users     @relation("messages_recipientTousers", fields: [recipient], references: [username], onDelete: Cascade, onUpdate: NoAction)
  users_messages_senderTousers    users     @relation("messages_senderTousers", fields: [sender], references: [username], onDelete: Cascade, onUpdate: NoAction)
}

model reviews {
  id                             Int       @id @default(autoincrement())
  sender                         String
  recipient                      String
  rating                         Decimal   @db.Decimal
  message                        String
  createdAt                      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  users_reviews_recipientTousers users     @relation("reviews_recipientTousers", fields: [recipient], references: [username], onDelete: Cascade, onUpdate: NoAction)
  users_reviews_senderTousers    users     @relation("reviews_senderTousers", fields: [sender], references: [username], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                 Int           @id @unique @default(autoincrement())
  firstName                          String
  lastName                           String
  username                           String        @unique
  password                           String
  admin                              Boolean       @default(false)
  gender                             users_gender? @default(M)
  profilePicture                     String
  balance                            Int?          @default(100000)
  items_items_sellerTousers          items[]       @relation("items_sellerTousers")
  messages_messages_recipientTousers messages[]    @relation("messages_recipientTousers")
  messages_messages_senderTousers    messages[]    @relation("messages_senderTousers")
  reviews_reviews_recipientTousers   reviews[]     @relation("reviews_recipientTousers")
  reviews_reviews_senderTousers      reviews[]     @relation("reviews_senderTousers")
}

model transactions {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  quantity  Int
  total     Int
  type      String
  item      Int
  buyer     String
  seller    String
  bought    Boolean?  @default(true)
}

model comments {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime?       @default(now()) @db.Timestamptz(6)
  userID          String
  postID          Int
  message         String
  destinations    destinations    @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)
}

model destination_pictures {
  id              Int             @id @default(autoincrement())
  name            String
  userID          String
  postID          String
  destinations    destinations    @relation(fields: [postID], references: [picID], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)

  @@map("destination-pictures")
}

model destination_reservations {
  id              Int             @id @default(autoincrement())
  userID          String
  postID          Int
  people          Int
  destinations    destinations    @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)

  @@map("destination-reservations")
}

model destinations {
  id                       Int                        @id(map: "destionations_pkey") @default(autoincrement())
  name                     String
  userID                   String
  startDate                DateTime                   @db.Timestamptz(6)
  endDate                  DateTime                   @db.Timestamptz(6)
  description              String
  createdAt                DateTime?                  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  freeSpots                Int
  latitude                 Decimal                    @db.Decimal
  longitude                Decimal                    @db.Decimal
  image                    String
  picID                    String?                    @unique
  comments                 comments[]
  destination_pictures     destination_pictures[]
  destination_reservations destination_reservations[]
  traveling_users          traveling_users            @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)
  dislikes                 dislikes[]
  likes                    likes[]
  notifications            notifications[]
}

model dislikes {
  id              Int              @id @default(autoincrement())
  userID          String?
  postID          Int?
  destinations    destinations?    @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users? @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)
}

model likes {
  id              Int              @id @default(autoincrement())
  userID          String?
  postID          Int?
  destinations    destinations?    @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users? @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  id                                                       Int             @id @default(autoincrement())
  sender                                                   String
  recipient                                                String
  destinationID                                            Int?
  rentID                                                   Int?
  message                                                  String
  new                                                      Boolean?        @default(false)
  destinations                                             destinations?   @relation(fields: [destinationID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users_notifications_recipientTotraveling_users traveling_users @relation("notifications_recipientTotraveling_users", fields: [recipient], references: [username], onDelete: Cascade, onUpdate: NoAction)
  rents                                                    rents?          @relation(fields: [rentID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users_notifications_senderTotraveling_users    traveling_users @relation("notifications_senderTotraveling_users", fields: [sender], references: [username], onDelete: NoAction, onUpdate: NoAction)
}

model rent_pictures {
  id              Int             @id @default(autoincrement())
  name            String
  userID          String
  postID          String
  rents           rents           @relation(fields: [postID], references: [picID], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)

  @@map("rent-pictures")
}

model rent_reservations {
  id              Int             @id @default(autoincrement())
  userID          String
  people          Int
  startDate       DateTime        @db.Date
  endDate         DateTime        @db.Date
  postID          Int
  rents           rents           @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)

  @@map("rent-reservations")
}

model rent_reviews {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime?       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userID          String
  postID          Int
  rating          Decimal         @db.Decimal
  message         String
  rents           rents           @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveling_users traveling_users @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)

  @@map("rent-reviews")
}

model rents {
  id                Int                 @id @default(autoincrement())
  userID            String
  createdAt         DateTime?           @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  name              String
  image             String
  people            Int
  description       String
  latitude          Decimal             @db.Decimal
  longitude         Decimal             @db.Decimal
  price             Int?
  picID             String?             @unique
  notifications     notifications[]
  rent_pictures     rent_pictures[]
  rent_reservations rent_reservations[]
  rent_reviews      rent_reviews[]
  traveling_users   traveling_users     @relation(fields: [userID], references: [username], onDelete: Cascade, onUpdate: NoAction)
}

model traveling_users {
  id                                                     Int                        @id @default(autoincrement())
  firstName                                              String
  lastName                                               String
  username                                               String                     @unique
  password                                               String
  email                                                  String
  phone                                                  String
  gender                                                 users_gender?              @default(M)
  profilePicture                                         String
  admin                                                  Boolean?                   @default(false)
  comments                                               comments[]
  destination_pictures                                   destination_pictures[]
  destination_reservations                               destination_reservations[]
  destinations                                           destinations[]
  dislikes                                               dislikes[]
  likes                                                  likes[]
  notifications_notifications_recipientTotraveling_users notifications[]            @relation("notifications_recipientTotraveling_users")
  notifications_notifications_senderTotraveling_users    notifications[]            @relation("notifications_senderTotraveling_users")
  rent_pictures                                          rent_pictures[]
  rent_reservations                                      rent_reservations[]
  rent_reviews                                           rent_reviews[]
  rents                                                  rents[]

  @@map("traveling-users")
}

enum users_gender {
  M
  F
}
